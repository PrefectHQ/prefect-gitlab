{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-gitlab","text":""},{"location":"#welcome","title":"Welcome!","text":"<p><code>prefect-gitlab</code> is a Prefect collection for working with GitLab repositories.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>This collection is designed to work with Prefect 2.3.0 or higher. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-gitlab</code> with <code>pip</code>:</p> <pre><code>pip install prefect-gitlab\n</code></pre> <p>Then, register to view the storage block on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_gitlab\n</code></pre> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#creating-a-gitlab-storage-block","title":"Creating a GitLab storage block","text":""},{"location":"#in-python","title":"In Python","text":"<pre><code>from prefect_gitlab import GitLabRepository\n\n# public GitLab repository\npublic_gitlab_block = GitLabRepository(\n    name=\"my-gitlab-block\",\n    repository=\"https://gitlab.com/testing/my-repository.git\"\n)\n\npublic_gitlab_block.save()\n\n\n# specific branch or tag of a GitLab repository\nbranch_gitlab_block = GitLabRepository(\n    name=\"my-gitlab-block\",\n    reference=\"branch-or-tag-name\"\n    repository=\"https://gitlab.com/testing/my-repository.git\"\n)\n\nbranch_gitlab_block.save()\n\n\n# private GitLab repository\nprivate_gitlab_block = GitLabRepository(\n    name=\"my-private-gitlab-block\",\n    repository=\"https://gitlab.com/testing/my-repository.git\",\n    access_token=\"YOUR_GITLAB_PERSONAL_ACCESS_TOKEN\"\n)\n\nprivate_gitlab_block.save()\n</code></pre>"},{"location":"#in-the-ui","title":"In the UI","text":"<p>Click on the Blocks menu, then click the + button in the page header to open the block catalog: </p> <p>Then, find the GitLab block and click the Add button: </p> <p>Finally, enter your repository information in the form and click Create: </p>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-gitlab</code>, feel free to open an issue in the prefect-gitlab repository.</p> <p>If you have any questions or issues while using <code>prefect-gitlab</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-gitlab</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-gitlab</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/prefecthq/prefect-gitlab.git\n\ncd prefect-gitlab/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_gitlab.credentials","title":"<code>prefect_gitlab.credentials</code>","text":"<p>Module used to enable authenticated interactions with GitLab</p>"},{"location":"credentials/#prefect_gitlab.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_gitlab.credentials.GitLabCredentials","title":"<code>GitLabCredentials</code>","text":"<p>             Bases: <code>Block</code></p> <p>Store a GitLab personal access token to interact with private GitLab repositories.</p> <p>Attributes:</p> Name Type Description <code>token</code> <code>SecretStr</code> <p>The personal access token to authenticate with GitLab.</p> <code>url</code> <code>str</code> <p>URL to self-hosted GitLab instances.</p> <p>Examples:</p> <p>Load stored GitLab credentials: <pre><code>from prefect_gitlab import GitLabCredentials\ngitlab_credentials_block = GitLabCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_gitlab/credentials.py</code> <pre><code>class GitLabCredentials(Block):\n    \"\"\"\n    Store a GitLab personal access token to interact with private GitLab\n    repositories.\n\n    Attributes:\n        token: The personal access token to authenticate with GitLab.\n        url: URL to self-hosted GitLab instances.\n\n    Examples:\n        Load stored GitLab credentials:\n        ```python\n        from prefect_gitlab import GitLabCredentials\n        gitlab_credentials_block = GitLabCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"GitLab Credentials\"\n    _logo_url = HttpUrl(\n        url=\"https://images.ctfassets.net/gm98wzqotmnx/55edIimT4g9gbjhkh5a3Sp/dfdb9391d8f45c2e93e72e3a4d350771/gitlab-logo-500.png?h=250\",  # noqa\n        scheme=\"https\",\n    )\n\n    token: SecretStr = Field(\n        name=\"Personal Access Token\",\n        default=None,\n        description=\"A GitLab Personal Access Token with read_repository scope.\",\n    )\n    url: str = Field(\n        default=None, title=\"URL\", description=\"URL to self-hosted GitLab instances.\"\n    )\n\n    def get_client(self) -&gt; Gitlab:\n        \"\"\"\n        Gets an authenticated GitLab client.\n\n        Returns:\n            An authenticated GitLab client.\n        \"\"\"\n        # ref: https://python-gitlab.readthedocs.io/en/stable/\n        gitlab = Gitlab(url=self.url, oauth_token=self.token.get_secret_value())\n        gitlab.auth()\n        return gitlab\n</code></pre>"},{"location":"credentials/#prefect_gitlab.credentials.GitLabCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_gitlab.credentials.GitLabCredentials.get_client","title":"<code>get_client</code>","text":"<p>Gets an authenticated GitLab client.</p> <p>Returns:</p> Type Description <code>Gitlab</code> <p>An authenticated GitLab client.</p> Source code in <code>prefect_gitlab/credentials.py</code> <pre><code>def get_client(self) -&gt; Gitlab:\n    \"\"\"\n    Gets an authenticated GitLab client.\n\n    Returns:\n        An authenticated GitLab client.\n    \"\"\"\n    # ref: https://python-gitlab.readthedocs.io/en/stable/\n    gitlab = Gitlab(url=self.url, oauth_token=self.token.get_secret_value())\n    gitlab.auth()\n    return gitlab\n</code></pre>"},{"location":"repositories/","title":"Repositories","text":""},{"location":"repositories/#prefect_gitlab.repositories","title":"<code>prefect_gitlab.repositories</code>","text":"<p>Integrations with GitLab.</p> <p>The <code>GitLab</code> class in this collection is a storage block that lets Prefect agents pull Prefect flow code from GitLab repositories.</p> <p>The <code>GitLab</code> block is ideally configured via the Prefect UI, but can also be used in Python as the following examples demonstrate.</p> <p>Examples:</p> <pre><code>    from prefect_gitlab.repositories import GitLabRepository\n\n    # public GitLab repository\n    public_gitlab_block = GitLabRepository(\n        name=\"my-gitlab-block\",\n        repository=\"https://gitlab.com/testing/my-repository.git\"\n    )\n\n    public_gitlab_block.save()\n\n\n    # specific branch or tag of a GitLab repository\n    branch_gitlab_block = GitLabRepository(\n        name=\"my-gitlab-block\",\n        reference=\"branch-or-tag-name\"\n        repository=\"https://gitlab.com/testing/my-repository.git\"\n    )\n\n    branch_gitlab_block.save()\n\n\n    # private GitLab repository\n    private_gitlab_block = GitLabRepository(\n        name=\"my-private-gitlab-block\",\n        repository=\"https://gitlab.com/testing/my-repository.git\",\n        access_token=\"YOUR_GITLAB_PERSONAL_ACCESS_TOKEN\"\n    )\n\n    private_gitlab_block.save()\n</code></pre>"},{"location":"repositories/#prefect_gitlab.repositories-classes","title":"Classes","text":""},{"location":"repositories/#prefect_gitlab.repositories.GitLabRepository","title":"<code>GitLabRepository</code>","text":"<p>             Bases: <code>ReadableDeploymentStorage</code></p> <p>Interact with files stored in GitLab repositories.</p> <p>An accessible installation of git is required for this block to function properly.</p> Source code in <code>prefect_gitlab/repositories.py</code> <pre><code>class GitLabRepository(ReadableDeploymentStorage):\n    \"\"\"\n    Interact with files stored in GitLab repositories.\n\n    An accessible installation of git is required for this block to function\n    properly.\n    \"\"\"\n\n    _block_type_name = \"GitLab Repository\"\n    _logo_url = HttpUrl(\n        url=\"https://images.ctfassets.net/gm98wzqotmnx/55edIimT4g9gbjhkh5a3Sp/dfdb9391d8f45c2e93e72e3a4d350771/gitlab-logo-500.png?h=250\",  # noqa\n        scheme=\"https\",\n    )\n    _description = \"Interact with files stored in GitLab repositories.\"\n\n    repository: str = Field(\n        default=...,\n        description=(\n            \"The URL of a GitLab repository to read from, in either HTTP/HTTPS or SSH format.\"  # noqa\n        ),\n    )\n    reference: Optional[str] = Field(\n        default=None,\n        description=\"An optional reference to pin to; can be a branch name or tag.\",\n    )\n    credentials: Optional[GitLabCredentials] = Field(\n        default=None,\n        description=\"An optional GitLab Credentials block for authenticating with \"\n        \"private GitLab repos.\",\n    )\n\n    @validator(\"credentials\")\n    def _ensure_credentials_go_with_http(cls, v: str, values: dict) -&gt; str:\n        \"\"\"Ensure that credentials are not provided with 'SSH' formatted GitLub URLs.\n        Note: validates `access_token` specifically so that it only fires when\n        private repositories are used.\n        \"\"\"\n        if v is not None:\n            if urllib.parse.urlparse(values[\"repository\"]).scheme not in [\n                \"https\",\n                \"http\",\n            ]:\n                raise InvalidRepositoryURLError(\n                    (\n                        \"Credentials can only be used with GitLab repositories \"\n                        \"using the 'HTTPS'/'HTTP' format. You must either remove the \"\n                        \"credential if you wish to use the 'SSH' format and are not \"\n                        \"using a private repository, or you must change the repository \"\n                        \"URL to the 'HTTPS'/'HTTP' format.\"\n                    )\n                )\n\n        return v\n\n    def _create_repo_url(self) -&gt; str:\n        \"\"\"Format the URL provided to the `git clone` command.\n        For private repos: https://&lt;oauth-key&gt;@gitlab.com/&lt;username&gt;/&lt;repo&gt;.git\n        All other repos should be the same as `self.repository`.\n        \"\"\"\n        url_components = urllib.parse.urlparse(self.repository)\n        if url_components.scheme in [\"https\", \"http\"] and self.credentials is not None:\n            token = self.credentials.token.get_secret_value()\n            updated_components = url_components._replace(\n                netloc=f\"oauth2:{token}@{url_components.netloc}\"\n            )\n            full_url = urllib.parse.urlunparse(updated_components)\n        else:\n            full_url = self.repository\n\n        return full_url\n\n    @staticmethod\n    def _get_paths(\n        dst_dir: Union[str, None], src_dir: str, sub_directory: Optional[str]\n    ) -&gt; Tuple[str, str]:\n        \"\"\"Returns the fully formed paths for GitLabRepository contents in the form\n        (content_source, content_destination).\n        \"\"\"\n        if dst_dir is None:\n            content_destination = Path(\".\").absolute()\n        else:\n            content_destination = Path(dst_dir)\n\n        content_source = Path(src_dir)\n\n        if sub_directory:\n            content_destination = content_destination.joinpath(sub_directory)\n            content_source = content_source.joinpath(sub_directory)\n\n        return str(content_source), str(content_destination)\n\n    @sync_compatible\n    async def get_directory(\n        self, from_path: Optional[str] = None, local_path: Optional[str] = None\n    ) -&gt; None:\n        \"\"\"\n        Clones a GitLab project specified in `from_path` to the provided `local_path`;\n        defaults to cloning the repository reference configured on the Block to the\n        present working directory.\n        Args:\n            from_path: If provided, interpreted as a subdirectory of the underlying\n                repository that will be copied to the provided local path.\n            local_path: A local path to clone to; defaults to present working directory.\n        \"\"\"\n        # CONSTRUCT COMMAND\n        cmd = [\"git\", \"clone\", self._create_repo_url()]\n        if self.reference:\n            cmd += [\"-b\", self.reference]\n\n        # Limit git history\n        cmd += [\"--depth\", \"1\"]\n\n        # Clone to a temporary directory and move the subdirectory over\n        with TemporaryDirectory(suffix=\"prefect\") as tmp_dir:\n            cmd.append(tmp_dir)\n\n            err_stream = io.StringIO()\n            out_stream = io.StringIO()\n            process = await run_process(cmd, stream_output=(out_stream, err_stream))\n            if process.returncode != 0:\n                err_stream.seek(0)\n                raise OSError(f\"Failed to pull from remote:\\n {err_stream.read()}\")\n\n            content_source, content_destination = self._get_paths(\n                dst_dir=local_path, src_dir=tmp_dir, sub_directory=from_path\n            )\n\n            copy_tree(src=content_source, dst=content_destination)\n</code></pre>"},{"location":"repositories/#prefect_gitlab.repositories.GitLabRepository-functions","title":"Functions","text":""},{"location":"repositories/#prefect_gitlab.repositories.GitLabRepository.get_directory","title":"<code>get_directory</code>  <code>async</code>","text":"<p>Clones a GitLab project specified in <code>from_path</code> to the provided <code>local_path</code>; defaults to cloning the repository reference configured on the Block to the present working directory. Args:     from_path: If provided, interpreted as a subdirectory of the underlying         repository that will be copied to the provided local path.     local_path: A local path to clone to; defaults to present working directory.</p> Source code in <code>prefect_gitlab/repositories.py</code> <pre><code>@sync_compatible\nasync def get_directory(\n    self, from_path: Optional[str] = None, local_path: Optional[str] = None\n) -&gt; None:\n    \"\"\"\n    Clones a GitLab project specified in `from_path` to the provided `local_path`;\n    defaults to cloning the repository reference configured on the Block to the\n    present working directory.\n    Args:\n        from_path: If provided, interpreted as a subdirectory of the underlying\n            repository that will be copied to the provided local path.\n        local_path: A local path to clone to; defaults to present working directory.\n    \"\"\"\n    # CONSTRUCT COMMAND\n    cmd = [\"git\", \"clone\", self._create_repo_url()]\n    if self.reference:\n        cmd += [\"-b\", self.reference]\n\n    # Limit git history\n    cmd += [\"--depth\", \"1\"]\n\n    # Clone to a temporary directory and move the subdirectory over\n    with TemporaryDirectory(suffix=\"prefect\") as tmp_dir:\n        cmd.append(tmp_dir)\n\n        err_stream = io.StringIO()\n        out_stream = io.StringIO()\n        process = await run_process(cmd, stream_output=(out_stream, err_stream))\n        if process.returncode != 0:\n            err_stream.seek(0)\n            raise OSError(f\"Failed to pull from remote:\\n {err_stream.read()}\")\n\n        content_source, content_destination = self._get_paths(\n            dst_dir=local_path, src_dir=tmp_dir, sub_directory=from_path\n        )\n\n        copy_tree(src=content_source, dst=content_destination)\n</code></pre>"}]}